/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NetworkChatTestSwing.java
 *
 * Created on 17.03.2011, 04:48:25
 */

package core.net;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.OOUtil;

/**
 *
 * @author Philipp
 */
public class NetworkChatTestSwing extends javax.swing.JFrame {

    public static TCPHost host;
    public static TCPClient client;
    public static String nickName;
    public static boolean isHost;

    public NetworkChatTestSwing() {
        initComponents();
        new Reciever();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPane = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        SendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextArea.setColumns(20);
        TextArea.setEditable(false);
        TextArea.setRows(5);
        ScrollPane.setViewportView(TextArea);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 378, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(SendButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                    .add(ScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(ScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 285, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SendButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if(evt.getKeyCode() == 32){
            SendButtonActionPerformed(null);
        }
        System.out.println(evt.getKeyCode());
    }//GEN-LAST:event_jTextField1KeyPressed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        if(isHost){
            try {
                host.sendMessage(nickName + ": " + jTextField1.getText());
            } catch (IOException ex) {
                Logger.getLogger(NetworkChatTestSwing.class.getName()).log(Level.SEVERE, null, ex);
            }
            TextArea.setText(TextArea.getText() + nickName + ": " + jTextField1.getText() + "\n");
            jTextField1.setText("");
        }
        else{
            try {
                client.sendMessage(nickName + ": " + jTextField1.getText());
            } catch (IOException ex) {
                Logger.getLogger(NetworkChatTestSwing.class.getName()).log(Level.SEVERE, null, ex);
            }
            TextArea.setText(TextArea.getText() + nickName + ": " + jTextField1.getText() + "\n");
            jTextField1.setText("");
        }
    }//GEN-LAST:event_SendButtonActionPerformed

    public static void main(String args[]) throws IOException {
        
        char readChar = 'x';
        while(readChar != 'h' && readChar != 'c'){
            readChar = OOUtil.readChar("Host (h) or Client (c) ?\n");
        }

        if(readChar == 'h'){
            host = new TCPHost(OOUtil.readInt("Port: "));

            System.out.println("Waiting for Connections...");

            while(host.connected == false){
                try{
                    host.acceptConnection();
                }
                catch(Exception e){
                }
            }

            isHost = true;
            
        }
        else{

            client = new TCPClient(OOUtil.readString("Hostname: "), OOUtil.readInt("Port: "));       

            isHost = false;

        }
        
        System.out.println("Connection established!");
        nickName = OOUtil.readString("Nickname: ");

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NetworkChatTestSwing().setVisible(true);
            }
        });
        
    }
    
    private class Reciever implements Runnable {
        
        public Reciever(){
            new Thread(this).start();
        }
        
        public void run() {
            while(true){
                try {
                    if(NetworkChatTestSwing.isHost){
                        TextArea.setText(TextArea.getText() + host.recieveMessage() + "\n");
                    }
                    else{
                        TextArea.setText(TextArea.getText() + client.recieveMessage() + "\n");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(NetworkChatTestSwing.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane ScrollPane;
    public javax.swing.JButton SendButton;
    public javax.swing.JTextArea TextArea;
    public javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
